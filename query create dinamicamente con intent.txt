//campi per la richiesta di query
	public static final String QUERY_TYPE = "query_type"; //p'arametro che indica il tipo della query richiesta
	
	public static final String QUERY_TYPE_SELECT = "query_type_select"; //query select
	public static final String QUERY_TYPE_INSERT = "query_type_insert"; //query insert
	public static final String QUERY_TYPE_UPDATE = "query_type_update"; //query update
	
	
	public static final String QUERY_TABLE = "query_table"; //deve contenere il nome della tabella su cui operare la query
	
	public static final String QUERY_FIELDS = "query_fields"; //array conetenete i nomi dei campi
	
	public static final String QUERY_WHERE = "query_where"; //matrice contenente {{NOME_CAMPO,{OPERATORE1,operatore2},VALORE}, ...}
	
	public static final String QUERY_SET = "query_set"; //set statement
	
	public static final String QUERY_VALUES = "query_values"; //query values statement
	
	public static final String QUERY_ORDER_BY = "query_order_by"; //clausola order by
	
	public static final String QUERY_ORDER_BY_ASC = "ASC"; //crescente
	public static final String QUERY_ORDER_BY_DESC = "DESC"; //decrescente
	
	public static final String QUERY_LIMIT = "query_limit"; //limit statement
	
	
	public static final String QUERY_OPERATOR_MINOR = "<"; //operatore minore
	public static final String QUERY_OPERATOR_MAJOR = ">"; //operatore maggiore
	public static final String QUERY_OPERATOR_EQUAL = "="; //operatore =
	public static final String QUERY_OPERATOR_LIKE = "LIKE"; //operatore LIKE	


/*
		    			
		    			
		    			Bundle extras = intent.getExtras();
		    			
		    			Logger.d("LDS", "intent richiesta query");
		    			
		    			if (extras.getString(QUERY_TYPE).equals(QUERY_TYPE_SELECT)) { //query select
		    				
		    				Logger.d("LDS", "query del tipo select");
		    				
		    				querySQL = "SELECT "; //query select
		    				

		    				if (extras.containsKey(QUERY_FIELDS)) { //campi per query
		    					
		    					String[] fields = extras.getStringArray(QUERY_FIELDS);
		    					
		    					for (int i = 0; i < fields.length; i++) {
		    						
		    						querySQL += fields[i];
		    						
		    						querySQL += ",";
		    						
		    					}
		    					
		    					querySQL += querySQL.substring(1);   					
		    					
		    				}
		    				
		    				
		    				if (extras.containsKey(QUERY_TABLE)) { //tabella per query
		    					
		    					querySQL += " FROM";
		    					
		    					querySQL += extras.getString(QUERY_TABLE);
		    					
		    				}
		    				
		    				
		    				
		    				
		    				
		    				
		    			} else if (extras.getString(QUERY_TYPE).equals(QUERY_TYPE_INSERT)) { //query insert
		    				
		    				Logger.d("LDS", "query del tipo insert");
		    				
		    				
		    				querySQL = "INSERT INTO "; //query select
		    				
		    				
		    				if (extras.containsKey(QUERY_TABLE)) { //tabella per query
		    					
		    					querySQL += extras.getString(QUERY_TABLE);
		    					
		    				}
		    				

		    				if (extras.containsKey(QUERY_FIELDS)) { //campi per query
		    					
		    					querySQL += "(";
		    					
		    					String[] fields = extras.getStringArray(QUERY_FIELDS);
		    					
		    					for (int i = 0; i < fields.length; i++) {
		    						
		    						querySQL += fields[i];
		    						
		    						querySQL += ",";
		    						
		    					}
		    					
		    					querySQL += querySQL.substring(1); 
		    					
		    					querySQL += ")";
		    					
		    				}
		    				
		    				if (extras.containsKey(QUERY_VALUES)) { //campi per query
		    					
		    					querySQL += " VALUES(";
		    					
		    					querySQL += "(";
		    					
		    					Object[] values = (Object[]) extras.getSerializable(QUERY_VALUES);
		    					
		    					for (int i = 0; i < values.length; i++) {
		    						
		    						if (values[i] instanceof String) { //argomento stringa
		    							
		    							querySQL += '"' + (String) values[i] + '"';
		    							
		    						} else if (values[i] instanceof Integer) { //int
		    							
		    							querySQL += (Integer) values[i];
		    						
		    						} else if (values[i] instanceof Double) { //double
		    							
		    							querySQL += (Double) values[i];
			    						
			    					} else if (values[i] instanceof Boolean) { //boolean
			    						
			    						if ((Boolean) values[i]) { //true
			    						
			    							querySQL += "1";
			    							
			    						} else { //false
			    							
			    							querySQL += "0";
			    						}
			    						
			    					}
		    						
		    						querySQL += ",";
		    						
		    					}
		    					
		    					querySQL += querySQL.substring(1); 
		    					
		    					querySQL += ")";
		    					
		    				}
		    				
		    				
		    				
		    				
		    				
		    				
		    			} else if (extras.getString(QUERY_TYPE).equals(QUERY_TYPE_UPDATE)) { //query update
		    				
		    				Logger.d("LDS", "query del tipo update");
		    				
		    				
		    			}
		    			
		    			
		    			
		    			if (extras.containsKey(QUERY_WHERE)) { //where per query
	    					
	    					querySQL += " WHERE ";
	    					
	    					Object[] where = (Object[]) extras.getSerializable(QUERY_WHERE);
	    					
	    					
	    					for(int i = 0; i < where.length; i++) {
	    						
	    						Object[] statement = (Object[]) where[i];
	    						
	    							
	    						querySQL += (String) statement[0]; //nome campo
	    						
	    						
	    						Object[] operators = (Object[]) statement[1];
	    						
	    						for (int x = 0; x < operators.length; x++) {
	    							
	    							querySQL += (String) operators[x];
	    							
	    						}
	    						
	    						if (statement[2] instanceof String) { //argomento stringa
	    							
	    							querySQL += '"' + (String) statement[2] + '"';
	    							
	    						} else if (statement[2] instanceof Integer) { //int
	    							
	    							querySQL += (Integer) statement[2];
	    						
	    						} else if (statement[2] instanceof Double) { //double
	    							
	    							querySQL += (Double) statement[2];
		    						
		    					} else if (statement[2] instanceof Boolean) { //boolean
		    						
		    						if ((Boolean) statement[2]) { //true
		    						
		    							querySQL += "1";
		    							
		    						} else { //false
		    							
		    							querySQL += "0";
		    						}
		    						
		    					}
	    						
	    						
	    						querySQL += " AND ";
	    							
	    						
	    					}
	    					
	    					querySQL += querySQL.substring(5);
	    					
	    				} //fine where
		    			
		    			
		    			if (extras.containsKey(QUERY_ORDER_BY)) { //order by per query
	    					
	    					querySQL += " ORDER BY ";
	    					
	    					if (extras.containsKey(QUERY_ORDER_BY_ASC)) {
	    						
	    						querySQL += "ASC";
	    						
	    					} else if (extras.containsKey(QUERY_ORDER_BY_DESC)) {
	    						
	    						querySQL += "DESC";
	    						
	    					}
	    					
	    					
	    				} //fine order by
		    			
		    			
		    			if (extras.containsKey(QUERY_LIMIT)) { //limit per query
	    					
	    					querySQL += " LIMIT ";
	    					
	    					querySQL += extras.getInt(QUERY_LIMIT);
	    					
	    					
	    				} //fine order by
		    			
		    			
		    			Logger.d("LDS", querySQL);
		    			*/
						
				